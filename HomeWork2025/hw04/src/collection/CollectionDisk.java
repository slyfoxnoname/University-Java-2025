package hw04.src.collection;

import hw04.src.model.Composition;
import hw04.src.model.CompositionType;

import java.util.ArrayList;
import java.util.Comparator;

public class CollectionDisk {
    private String name;                        // –Ω–∞–∑–≤–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó
    private ArrayList<Composition> compositions; // —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π

    public CollectionDisk(String name) {
        this.name = name;
        this.compositions = new ArrayList<>();
    }

    // ‚úÖ –î–æ–¥–∞—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é
    public void addComposition(Composition composition) {
        if (composition != null) {
            compositions.add(composition);
            System.out.println("‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é: " + composition.getName());
        }
    }

    // ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é
    public void removeComposition(String name) {
        boolean removed = compositions.removeIf(c -> c.getName().equalsIgnoreCase(name));
        if (removed)
            System.out.println("‚ùå –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é: " + name);
        else
            System.out.println("‚ö† –ö–æ–º–ø–æ–∑–∏—Ü—ñ—é \"" + name + "\" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }

    // üîç –ó–Ω–∞–π—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é
    public Composition findByName(String name) {
        for (Composition c : compositions) {
            if (c.getName().equalsIgnoreCase(name)) {
                return c;
            }
        }
        return null;
    }

    // üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó
    public void showAll() {
        System.out.println("\nüéµ –ö–æ–ª–µ–∫—Ü—ñ—è: " + name);
        if (compositions.isEmpty()) {
            System.out.println("(–ø–æ—Ä–æ–∂–Ω—è)");
            return;
        }

        for (Composition c : compositions) {
            System.out.println("-------------------------------");
            c.showInfo();
        }
    }

    // üî¢ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π
    public int getCount() {
        return compositions.size();
    }

    // üîΩ –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
    public void sortByLength() {
        compositions.sort(Comparator.comparingInt(Composition::getSongLength));
        System.out.println("‚úÖ –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é.");
    }

    // ‚≠ê –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º (–∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑—ñ—Ä–æ–∫)
    public void sortByStarsDescending() {
        compositions.sort((a, b) -> Integer.compare(b.getStars(), a.getStars()));
        System.out.println("‚úÖ –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é (–∑—ñ—Ä–∫–∏ ‚Üì).");
    }

    // üéº –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó –∑–∞ —Ç–∏–ø–æ–º
    public void showByType(CompositionType type) {
        System.out.println("\nüéß –ö–æ–º–ø–æ–∑–∏—Ü—ñ—ó —Ç–∏–ø—É: " + type.getDescription());
        boolean found = false;
        for (Composition c : compositions) {
            if (matchesType(c, type)) {
                c.showInfo();
                found = true;
            }
        }
        if (!found) System.out.println("(–Ω–µ–º–∞—î –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π —Ü—å–æ–≥–æ —Ç–∏–ø—É)");
    }

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É (—á–µ—Ä–µ–∑ instanceof)
    private boolean matchesType(Composition c, CompositionType type) {
        return switch (type) {
            case SONG -> c instanceof hw04.src.model.Song;
            case INSTRUMENTAL -> c instanceof hw04.src.model.Instrumental;
            case SYMPHONY -> c instanceof hw04.src.model.Symphony;
        };
    }
}
